<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pomodoro Navi - カレンダー</title>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.css" rel="stylesheet" />
    <%= stylesheet_link_tag 'top', media: 'all', 'data-turbolinks-track': 'reload' %>
    <style>

      /* 共通のスタイル */
      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 2em;
        margin: 100px auto; /* 上下左右の中央揃え */
      }

      /* カレンダーのスタイル */
      .calendar-title {
        font-size: 36px;
        text-align: center;
        margin-bottom: 1em;
      }

      total {
        display: block;
        text-align: center;
        font-size: 1.2em;
        margin-bottom: 1em;
      }

      #calendarContainer {
        width: 700px;
        margin: 0 auto;
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.1);
      }

      /* 作業時間投稿フォームのスタイル */
      .formpage-title {
        font-size: 24px;
        margin-top: 1em;
        margin-bottom: 1em;
      }

      .formpage-field {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 30px; /* フォームの下の余白 */
      }

      .formpage-field label {
        font-size: 16px;
        color: #fff;
        margin-bottom: 5px;
      }

      .formpage-field input {
        width: 500px; /* フォームの横幅 */
        padding: 10px; /* フォームの余白 */
        font-size: 14px; /* フォームの文字サイズ */
        color: #000; /* フォームの文字色 */
        border: 1px solid #fff; /* フォームの枠線 */
        opacity: 0.5; /* フォームの透明度 */
        border-radius: 5px; /* 入力フィールドの角を丸く */
        text-align: center;
      }

      /* 送信ボタンのスタイル */
      .formpage-actions {
        text-align: center; /* ボタンを中央揃え */
      }

      .formpage-actions button {
        width: 300px; /* ボタンの横幅 */
        color: #fff; /* ボタンの文字色 */
        border: 1px solid #fff; /* ボタンの枠線 */
        border-radius: 10px; /* ボタンの角を丸くする */
        padding: 10px; /* ボタンの余白 */
        font-size: 20px; /* ボタンの文字サイズ */
        cursor: pointer; /* カーソル変更 */
        background-color: rgba(255, 255, 255, 0.1); /* 白色で10%透過 */
        margin-top: 10px;
      }

      .formpage-actions button:hover {
        opacity: 0.5;
      }

      /* 送信ボタン無効時のスタイル */
      .formpage-actions button.disabled {
        opacity: 0.2;
        cursor: not-allowed; /* クリックできないようにする */
      }
    </style>
  </head>
<body>
  <div class="calendar-title"><b>Pomodoro Navi Calendar</b></div>
  <div id="calendar">
    <total>これまでに積み上げた成果： <b><%= @total_duration %></b> min（<%= @total_duration_formatted %>）</total>
    <div id="calendarContainer"></div>
  </div>

  <!-- カレンダー表示のためのJS -->
  <script>
  document.addEventListener('turbolinks:load', function() {
    if (typeof FullCalendar === 'undefined') {
      setTimeout(initCalendar, 100); // 100ms 後に再試行
      return;
    }
    initCalendar();
  });

  function initCalendar() {
    var calendarEl = document.getElementById('calendarContainer');
    if (!calendarEl) return;

    var workSessions = {};
    <% @sessions.each do |session| %>
      var date = '<%= session.start_time.to_date %>';
      if (!workSessions[date]) {
        workSessions[date] = 0;
      }
      workSessions[date] += <%= session.duration %>;
    <% end %>

    var events = [];
    for (var date in workSessions) {
      events.push({
        title: workSessions[date] + ' min',
        start: date,
        allDay: true,
        backgroundColor: 'rgba(0, 128, 0, 0.3)',
        borderColor: 'rgba(0, 128, 0, 0.3)'
      });
    }

    var calendar = new FullCalendar.Calendar(calendarEl, {
      initialView: "dayGridMonth",
      events: events,

      eventContent: function (arg) {
        let durationText = arg.event.title;
        return { html: '<div style="text-align: center; font-size: 18px; color: white;">' + durationText + "</div>" };
      },

      dateClick: function (info) {
        console.log("Clicked date:", info.dateStr);
        document.getElementById("session_date").value = formatDate(new Date(info.dateStr));
      }
    });

    calendar.render();
  }
  </script>

  <!-- 作業時間投稿フォーム -->
  <div class="formpage-title"><b>選択した日付に作業時間を保存</b></div>
  <%= form_with model: PomodoroSession.new, url: pomodoro_sessions_path, method: :post, local: true do |f| %>

    <div class="formpage-field">
      <label for="session_date">作業した日付：</label>
      <%= f.text_field :start_time, id: "session_date", readonly: true %>
    </div>

    <div class="formpage-field">
      <label for="start_time">開始時刻：</label>
      <%= f.time_field :start_time, id: "start_time" %>
    </div>

    <div class="formpage-field">
      <label for="end_time">終了時刻：</label>
      <%= f.time_field :end_time, id: "end_time" %>
    </div>

    <%= f.hidden_field :duration, id: "duration" %>
    <%= f.hidden_field :break_duration, value: 0 %>
    <%= f.hidden_field :status, value: "completed" %>
    <%= f.hidden_field :mode, value: "work" %>

    <div class="formpage-actions">
      <button type="submit">作業時間を追加する</button>
    </div>

  <% end %>
  </div>

  <!-- 作業時間投稿フォームのJS --!>
  <script>
  document.addEventListener("turbolinks:load", function () {
    // 選択した日付を yyyy/mm/dd(曜日) 形式で表示
    let today = new Date();
    let formattedDate = formatDate(today);
    document.getElementById("session_date").value = formattedDate;

    // 現在時刻を自動取得して開始・終了時刻にセット
    let now = new Date();
    let currentTime = now.toTimeString().slice(0, 5);
    document.getElementById("start_time").value = currentTime;
    document.getElementById("end_time").value = currentTime;

    // 時刻入力の変化を監視して duration を計算
    document.getElementById("start_time").addEventListener("change", calculateDuration);
    document.getElementById("end_time").addEventListener("change", calculateDuration);
    });

    // 日付フォーマット関数
    function formatDate(date) {
      let yyyy = date.getFullYear();
      let mm = ("0" + (date.getMonth() + 1)).slice(-2);
      let dd = ("0" + date.getDate()).slice(-2);
      let day = ["日", "月", "火", "水", "木", "金", "土"][date.getDay()];
      return `${yyyy}/${mm}/${dd} (${day}) `;
    }

    // duration（作業時間）を計算
    function calculateDuration() {
      let start = document.getElementById("start_time").value;
      let end = document.getElementById("end_time").value;
      let label = document.querySelector("label[for='end_time']");
      let submitButton = document.querySelector(".formpage-actions button");

      if (start && end) {
        let startTime = new Date("2000-01-01T" + start);
        let endTime = new Date("2000-01-01T" + end);
        let duration = (endTime - startTime) / (1000 * 60); // 分単位

      document.getElementById("duration").value = Math.max(duration, 0);
      label.innerHTML = `終了時刻（ 作業時間 ${duration} min ）：`; // ラベルを更新

      // 開始時刻が終了時刻より後ならボタンを無効化
      if (duration < 0) {
        submitButton.disabled = true;
        submitButton.classList.add("disabled");
      } else {
        submitButton.disabled = false;
        submitButton.classList.remove("disabled");
      }
    }
  }
  </script>
</body>
</html>